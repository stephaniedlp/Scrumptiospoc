@page "/locations"
@rendermode InteractiveServer
@using Scrumptiospoc.Interfaces;
@using Scrumptiospoc.Models;
@using System.ComponentModel
@using System.Collections.ObjectModel
@inject IOrderInterface _orderservice;
@inject ILocationInterface _locationservice;
@inject IInventoryInterface _inventoryservice;
@inject IProductInterface _productservice;
@inject NavigationManager NavigationManager;

<PageTitle>Admin</PageTitle>

<h1>Hello Admin</h1>

<p class="add-subtitle">Add Location <button class="btn-add" @onclick="AddLocation">+</button></p>

<hr />

<div class="container">
    <div class="row">
        @foreach (var location in LocationList)
        {
            <div class="col-4 mt-4">
                <div class="card">
                    <div class="card-header">
                        <div class="small">
                            <a href="/tablet/@location.Id"> @location.Id</a>
                        </div>
                    </div>
                    <div class="card-body">
                        <div class="col-12">

                            <p>Name: @location.Name</p>
                            <p>Address: @location.Address</p>
                        </div>
                        <p>
                            <button class="btn btn-primary" @onclick="()=>NavigateToInventory(location)">Inventory</button>
                            <button class="btn btn-primary" @onclick="()=>NavigateToOrders(location)">Orders</button>
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


@code {
    public event PropertyChangedEventHandler PropertyChanged;
    private ObservableCollection<Location> _locations = new();
    public ObservableCollection<Location> LocationList
    {
        get => _locations;
        set
        {
            if (_locations != value)
            {

                _locations = value;
                OnPropertyChanged(nameof(Locations));
                OnStateChanged();

            }
        }
    }


    protected override async Task OnInitializedAsync()
    {

        await base.OnInitializedAsync();
        _orderservice.StateChanged += OnStateChanged;
        Location location = new Location
            {
                Address = "123 Main St",
                Longitude = 253.00,
                Latitude = 25225.555
            };
        LocationList = _locationservice.Locations;


    }


    public async Task AddLocation()
    {
        await _locationservice.CreateLocation();
        StateHasChanged();
    }
    private void OnStateChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        _orderservice.StateChanged -= OnStateChanged;
    }

    protected virtual void OnPropertyChanged(string propertyName)
    {
        PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propertyName));
    }

    private void NavigateToOrders(Location loc)
    {
        _locationservice.SelectLocation(loc);
        NavigationManager.NavigateTo("/Orders");
    }

    private void NavigateToInventory(Location loc)
    {
        _locationservice.SelectLocation(loc);
        NavigationManager.NavigateTo("/Inventory");
    }



}
