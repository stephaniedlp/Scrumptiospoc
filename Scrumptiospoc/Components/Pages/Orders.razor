@page "/orders"
@inherits MainLayout
@using Scrumptiospoc.Components.Layout
@rendermode InteractiveServer
@using Scrumptiospoc.Interfaces;
@using Scrumptiospoc.Models;
@using System.ComponentModel
@using System.Collections.ObjectModel
@inject IOrderInterface _orderservice;
@inject ILocationInterface _locationservice;
@inject IInventoryInterface _inventoryservice;
@inject IProductInterface _productservice;

<PageTitle>Orders</PageTitle>
<a href="/locations" class="btn me-2">
    ← Back
</a>

<div class="container">
    <div class="row">
        <div class="col-12">
            <a href="/tablet/@Location.Id"> @Location.Id</a>
            <h1>@Location.Name</h1>
            <h2>@Location.IsActive</h2>
            <p>@Location.Address</p>
            <p>Total downtime: @Location.Downtime</p>
            <hr />
        </div>
    </div>
    <div class="row">
        <div class="col-12">
            <h3>
                Orders
            </h3>
            <button disabled="@(!Location.IsActive)" type="button" @onclick="AddOrder" class="btn btn-primary">Add Order</button>
            <br />

        </div>
        @foreach (var item in Order)
        {
            <div class="col-4 mt-4">
                <div class="card">
                    <div class="card-header">
                        <div class="medium"> @item.Id </div>
                    </div>
                    <div class="card-body">
                        <p>Activity log</p>
                        <div class="row m-0">
                            @if (item.CreationDate != null)
                            {
                                <p> Created: @item.CreationDate</p>
                            }
                            @if (item.AcceptedDate != null)
                            {
                                <p> Accepted: @item.AcceptedDate</p>
                            }
                            @if (item.CancelationDate != null)
                            {
                                <p> Cancelled: @item.CancelationDate</p>
                            }
                            @if (item.FinishedDate != null)
                            {
                                <p> Ready: @item.FinishedDate</p>
                            }
                            @if (item.DeliveryDate != null)
                            {
                                <p> Delivered: @item.DeliveryDate</p>
                            }
                            @if (item.RejectedDate != null)
                            {
                                <p> Rejected: @item.RejectedDate</p>
                            }
                        </div>
                        <hr />
                            <p>Products available</p>
                        <div class="col-12">
                            @foreach (var assigned in item.Location.Inventory.Items)
                            {
                                <div class="row m-0">
                                    <div class="col-6 p-2">
                                        <p>@assigned.Product.Name</p>
                                    </div>
                                    <div class="col-2 p-2">
                                        <p>@assigned.Quantity</p>
                                    </div>

                                    <div class="col-4 text-end">
                                        <button type="button" disabled="@(!assigned.IsDisabled && assigned.Quantity == 0)" @onclick="()=>AddToOrder(assigned, item)" class="btn btn-primary p-2 btn-sm mt-2">
                                            Add
                                        </button>

                                    </div>
                                </div>
                            }
                        </div>
                        <hr />
                        <p>Products in my Order</p>
                        <div class="col-12">
                            @if (item.OrderItems.Count() > 0)
                            {
                                @foreach (var product in item.OrderItems)
                                {
                                    <div class="row m-0">
                                        <div class="col-8">
                                            <p>@product.Product.Name</p>
                                        </div>
                                        <div class="col-4 text-end">
                                            <button type="button" @onclick="()=>RemoveFromOder(product, item)" class="btn btn-danger btn-sm ">Remove</button>
                                        </div>

                                    </div>
                                }

                            }
                        </div>
                    </div>
                    <div class="card-footer ">
                        <button type="button" @onclick="()=>SetOrder(item)" disabled="@(item.Status == Status.IsSet)" class="btn btn-primary ">
                            Set Order
                        </button>
                        @if (item.Status == Status.IsSet)
                        {
                            <p class="fs-6">The order has been placed.</p>
                        }
                    </div>
                </div>

            </div>
        }
    </div>
</div>

@code {

    private Location location = new();
    public Location Location
    {
        get => location;
        set
        {
            if (location != value)
            {

                location = value;
                StateHasChanged();

            }
        }
    }
    private ObservableCollection<Order> _orders = new();
    public ObservableCollection<Order> Order
    {
        get => _orders;
        set
        {
            if (_orders != value)
            {

                _orders = value;
                StateHasChanged();

            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        UpdateOrders();
        _orderservice.StateChanged += OnStateChanged;
        _locationservice.StateChanged += OnStateChanged;
    }
    private void OnStateChanged()
    {
        try
        {

            InvokeAsync(() =>
            {
                UpdateOrders();  // Update orders based on the new state
                StateHasChanged();  // Trigger a re-render
            });
        }
        catch (Exception ex)
        {

        }

    }
    public async void AddOrder()
    {
        await _orderservice.CreateOrder(Location);
        UpdateOrders();


    }


    public async void SetOrder(Order order)
    {
        await _orderservice.SetOrder(order);
    }


    public async void RemoveFromOder(InventoryItem item, Order order)
    {
        await _orderservice.RemoveProductFromOrder(item, order);
    }

    public async void AddToOrder(InventoryItem item, Order order)
    {
        if (!item.IsDisabled)
        {
            await _orderservice.AddProductToOrder(item, order);
            StateHasChanged();
        }

    }

    public async void UpdateOrders()
    {
        Location = await _locationservice.GetSelectedLocation();
        Order = await _orderservice.GetOrderLocation(Location);
    }
}
