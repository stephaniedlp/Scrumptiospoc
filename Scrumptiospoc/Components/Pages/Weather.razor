@page "/home"
@page "/home/{paramId:guid}"
@layout Restaurant
@using Scrumptiospoc.Components.Layout
@using Scrumptiospoc.Interfaces;
@using Scrumptiospoc.Models;
@using System.Collections.ObjectModel
@inject IOrderInterface _orderservice;
@inject ILocationInterface _locationservice;
@rendermode InteractiveServer



<PageTitle>Order</PageTitle>

<h1>Orders</h1>
<hr />

@if (Orders.Any())
{
    @foreach (var item in Orders.Where(w => w.Status != Status.NotSet))
    {
        <div class="mt-4">

            <p>@item.Id</p>
            <p>@item.Location?.Address</p>
            <p>@item.Status</p>
            @foreach (var prod in item.OrderItems)
            {
                <ol>@prod.Product.Name</ol>
                <ol>@prod.Product.Description</ol>
            }


            @if (item.Status == Status.IsSet)
            {
                <button class="btn btn-success" @onclick="() => Accept(item)">Accept</button>
                <button class="btn btn-danger" @onclick="() => Reject(item)">Reject</button>
            }
            @if (item.Status == Status.Accepted)
            {
                <button class="btn btn-primary" @onclick="() => Ready(item)">Ready</button>
                <button class="btn btn-danger" @onclick="() => Cancel(item)">Cancel</button>
            }
            @if (item.Status == Status.Finished)
            {
                <button class="btn btn-primary" @onclick="() => Delivered(item)">Delivered</button>
                <button class="btn btn-danger" @onclick="() => Cancel(item)">Cancel</button>
            }


        </div>
    }
}
else
{
    <p>No orders available.</p>
}



@code {
    [Parameter]
    public Guid paramId { get; set; }



    private ObservableCollection<Order> _orders = new();
    public ObservableCollection<Order> Orders
    {
        get => _orders;
        set
        {
            if (_orders != value)
            {

                _orders = value;
                StateHasChanged();
            }
        }
    }


    protected override async Task OnInitializedAsync()
    {
        // Call the base method asynchronously
        await base.OnInitializedAsync();
        _orderservice.StateChanged += OnStateChanged;

        if (paramId != Guid.Empty)
        {
            RefreshOrders(paramId);
        }
        else
        {
            Orders = new();
        }



    }

    private async void RefreshOrders(Guid paramId)
    {
        Orders.Clear();
        Location location = _locationservice.Locations.Where(w => w.Id == paramId).SingleOrDefault();

        var filteredOrders = location.Orders;

        foreach (var order in filteredOrders)
        {
            Orders.Add(order);
        }

        StateHasChanged();
    }

    private void Accept(Order order)
    {

        _orderservice.AcceptOrder(order);
    }
    private void Reject(Order order)
    {
        _orderservice.RejectOrder(order);
    }
    private void Ready(Order order)
    {
        _orderservice.SetReadyOrder(order);
    }
    private void Delivered(Order order)
    {
        _orderservice.Delivered(order);
    }
    private void Cancel(Order order)
    {
        _orderservice.CancelOrder(order);
    }

    private void OnStateChanged()
    {
        try
        {

            InvokeAsync(() =>
            {
                RefreshOrders(paramId);  // Update orders based on the new state
                StateHasChanged();  // Trigger a re-render
            });
        }
        catch (Exception ex)
        {

        }

    }

}
